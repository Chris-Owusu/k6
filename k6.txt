What is performance testing: It is checking to see if the system can handle the expected and unexpected amount of traffic.

Drafting a performace testing plan:
> Get and analyse production logs on how the system is being used, what modules get the most traffic, what is the waiting time, what is the use and what are the trends.
NB: Always set up a separate environment for perfomance testing.
> Set a baseline


To download K6 visit: https://grafana.com/docs/k6/latest/get-started/installation/ and install "the lastest official installer" 

* To check if k6 is properly installed, open powershell and and run k6

How to run your test script: k6 run <filename> eg: k6 run assertions.js

k6 website for performance testing: https://test.k6.io
k6 docs: https://k6.io/docs/using-k6/metrics/reference/

Create mock endpoints with : https://designer.mocky.io/


Determine the target value by referencing Application Performance Monitoring (APM) tools
or analytic tools that provide information from the production environment, or use
business-provided estimations if such tools are not accessible.


Smoke test: It is done before the any test to ensure that the basis functionality of the test works as expected.
Load test: It's done to test the application under average load. It has a ramp up and a ramp down stage and a constant stage in between it.
Stress test: It's done to test the applications under above average load. Example it to test how the application will perfrom under rash our's (Black friday).
Spike test: It's done to test how the application will perform under a sudden increase in traffic. Example it to test how the application will perfrom under rush our's (Black friday).
Breakpoint test: It's done to testing how long it will take to break the system. It's done by gradually increasing the load till the breaking point.
Soak test/ endurance test: Stretching a load test. To identify issues like memory leaks and resource depletion that may only appear after prolonged periods of continuous use.


Stages of k6:
> Init stage: Imports, sleep, options, logs etc.
> Setup stage
> Virtual users code stage: default function
> Teardown stage


to run debug for http request in k6 use: k6 run --http-debug <file name>. add ="full" to include the http response.


Using environment variables: k6 run -e <name of the variable: eg BASE_URL=theActualLink> <file_name>
NB: k6 stores the environment variable in "__ENV" file.

Useful resource: https://grafana.com/docs/k6/latest/javascript-api/jslib/utils/randomstring/


k6 cloud can run test in a distrubuted way and can simulate users from all over the world.

to run K6 in the cloud, you first have to login. To login use: k6 login cloud --token <your api token>. to run you test use k6 cloud <script name>
You can also run you script locally and export the output to k6 cloud. Use the "-o cloud" to achive this. Example: k6 run <script name> -o cloud. 
To link a project in the cloud to you local script add the below script to your options script: 
ext: {
        loadimpact: {
            projectID: 3679087
        }
    }


get more insight into k6 run recommendations: https://k6.io/docs/cloud/analyzing-results/performance-insights/

cli options: you can use flags such as --vus/-u, --duration/-d, --iterations/-i etc to specify 

Bypassing ssl certificate error, use this flag: --insecure-skip-tls-verify. Example: k6 run <filename> --insecure-skip-tls-verify

export the output run to JSON, use this flag, --summary-export=<filename>.json. Example k6 run exportToJSON.js --summary-export=result.json. To get a detailed output use: k6 run <file_name> --out json=<filename>.json

to print the exit code use: echo $?